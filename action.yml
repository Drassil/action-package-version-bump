name: 'action-package-version-bump'
description: 'Github action to upgrade the package.json version and create a changelog based on PR description'
inputs:
  repository:
    description: 'The github repository where to pull the changes (only the path, without the host)'
    required: false
  user_name:
    description: 'Name of the git user to push the changes'
    required: true
  user_email:
    description: 'Email of the git user to push the changes'
    required: true
  ref_branch:
    description: 'Branch to use as a base reference for the version bump. If not specified, it will use the pull_request one when available'
    required: false
  version_args:
    description: 'npm version command arguments. '
    required: false
    default: 'patch'
  node_version:
    description: 'node version used for the npm commands'
    required: false
    default: '16'
  access_token:
    description: 'Personal access token to clone the repository. Default: github.token'
    required: false
  skip_push:
    description: 'Skip pushing committed changes to the repository. Default: false'
    required: true
    type: boolean
    default: false
  skip_changelog:
    description: 'Skip changelog update'
    required: false
    type: boolean
    default: false
  action:
    description: 'Action to perform: "bump" or "restore"'
    required: true
    default: 'bump'


runs:
  using: 'composite'
  steps:
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0
          token: ${{ inputs.access_token || github.token }}

      - name: Restore files
        shell: bash
        run: |
          git config remote.main-repo.url >&- || git remote add main-repo https://github.com/${{ inputs.repository || github.repository }}
          git config --global user.name ${{ inputs.user_name }}
          git config --global user.email ${{ inputs.user_email }}

          # Get the name of the target branch
          ref_branch_input=${{ inputs.ref_branch }}
          target_branch=$ref_branch_input || $(gh pr view ${{ github.event.pull_request.number }} --json baseRefName -q '.baseRefName')

          # Fetch the target branch
          git fetch main-repo $target_branch:$target_branch

          # Get the last common commit of the current PR branch and the target branch
          common_commit=$(git merge-base HEAD $target_branch)

          # Get the version of the package from the common commit
          target_version=$(git show $common_commit:package.json | jq -r '.version')

          # Restore the version of the package in the current branch
          jq ".version = \"$target_version\"" package.json > temp.json && mv temp.json package.json

          # Replace the CHANGELOG.md content with the content of the CHANGELOG.md from the common commit
          git show $common_commit:CHANGELOG.md > CHANGELOG.md

          npm install --package-lock-only --ignore-scripts

      - name: Create Restore Commit
        env:
          GH_TOKEN: ${{ inputs.access_token || github.token }}
        if: inputs.action == 'restore'
        shell: bash
        run: |
          git add -A
          git commit -m "chore: restore package version to $target_version and restored changelog"

      - name: Bump version
        shell: bash
        if: inputs.action == 'bump'
        run: |
          ref_branch_input=${{ inputs.ref_branch }}
          target_branch=$ref_branch_input || $(gh pr view ${{ github.event.pull_request.number }} --json baseRefName -q '.baseRefName')

          # Get the version of the package from the ref_branch
          target_version=$(git show main-repo/target_branch:package.json | jq -r '.version')

          # Use the latest version of the package.json from the ref_branch
          jq ".version = \"$target_version\"" package.json > temp.json && mv temp.json package.json

          echo "Updating version"
          npm version --no-git-tag-version ${{ inputs.version_args }}

      - name: Update changelog
        shell: bash
        if: inputs.action == 'bump' && inputs.skip_changelog != 'true'
        run: |
          # Get the name of the target branch
          ref_branch_input=${{ inputs.ref_branch }}
          target_branch=$ref_branch_input || $(gh pr view ${{ github.event.pull_request.number }} --json baseRefName -q '.baseRefName')

          PACKAGE_VERSION=`cat package.json | jq -r '.version'`

          echo "Package version: $PACKAGE_VERSION. Getting previous changelog"
          PREV_CHANGELOG=`git show main-repo/target_branch:CHANGELOG.md || true`

          echo "Composing new changelog"
          echo -e "Rev: $PACKAGE_VERSION\n=============\n ${{ github.event.pull_request.body }}\n\n\n" > CHANGELOG.md
          echo -e "$PREV_CHANGELOG" >> CHANGELOG.md


      - name: Create Bump Commit
        env:
          GH_TOKEN: ${{ inputs.access_token || github.token }}
        if: inputs.action == 'bump'
        shell: bash
        run: |
          git add -A
          git commit -m "chore: bump package version to $PACKAGE_VERSION and update changelog"


      - name: Push
        if: ${{ inputs.skip_push != 'true' }}
        shell: bash
        run: |          
          git push --force https://${{ inputs.access_token || github.token }}@github.com/${{ github.event.pull_request.head.repo.full_name }}


    
